# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Actor {
  """A URL pointing to the actor public avatar."""
  avatarUrl: String

  """The username of the actor."""
  login: String!

  """The HTTP URL for this actor."""
  url: String!
}

type Aggregation {
  """The Bucket key"""
  key: String!

  """The number of elements in the bucket"""
  docCount: Float!
}

type Aggregations {
  """The filed that was aggregated on"""
  field: String!

  """A list of aggregation buckets"""
  buckets: [Aggregation!]!
}

type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type CommentEdge {
  """The item at the end of the edge."""
  node: Comments!
}

type Comments {
  id: ID!
}

type Config {
  """
  Collection of supported types of dataset, for example github issues, jira projects, etc...
  """
  datasets: Datasets!

  """A single dataset element"""
  dataset(id: String!): Dataset!
}

type ConfigAggregation {
  """Actual field that can be aggregated upon"""
  field: String!

  """Type of aggregation (term, date, ...)"""
  facetType: String

  """Displayable name for the aggregation"""
  name: String

  """Value to display if field is null"""
  nullValue: String

  """Should the aggregation be displayed by default"""
  default: Boolean
}

type ConfigAggregationsConnection {
  """A list of edges."""
  nodes: [ConfigAggregation!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type Dataset {
  id: ID!

  """Key representing the dataset in the tool configuration"""
  key: String!

  """Displayable name of the dataset"""
  name: String

  """Elasticsearch index containing the dataset"""
  index: String

  """Is the dataset active or not"""
  active: Boolean
}

type Datasets {
  """Total count of elements"""
  totalCount: Float!

  """A list of available datasets"""
  nodes: [Dataset!]!
}

type DatasetsConfig {
  """Query received as a parameter"""
  query: String!
}

type GithubPullrequests {
  """Access to the dataset as individual items, aggregations and more"""
  data(
    """Query used to filter down content"""
    query: String
  ): GithubPullrequestsData!

  """Access to configuration values and metadata"""
  config: GithubPullrequestsConfig!
}

type GithubPullrequestsConfig {
  """Query received as a parameter"""
  query: String!

  """Returns a paginated list of available aggregations"""
  aggregations: ConfigAggregationsConnection!
}

type GithubPullrequestsData {
  """Query received as a parameter"""
  query: String!

  """Returns a paginated list of items"""
  items(
    orderBy: ItemOrder

    """Number if items to return """
    size: Int = 10

    """Return items starting from"""
    from: Int = 0
  ): ItemConnection!

  """Returns a single item by providing its ID"""
  item(
    """Return items starting from"""
    id: String!
  ): PullRequest!

  """Return aggregations (facets)"""
  aggregations(
    """
    Field to aggregate on, using the node as the root object (examples: states, author.login)
    """
    field: String!
  ): Aggregations!
}

type Issue {
  id: ID!
}

type IssueConnection {
  """A list of edges."""
  edges: [IssueEdge!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type IssueEdge {
  """The item at the end of the edge."""
  node: Issue!
}

type ItemConnection {
  nodes: [PullRequest!]
  totalCount: Int!
}

input ItemOrder {
  direction: OrderDirection!
  field: ItemOrderField!
}

"""Properties by which issues connections can be ordered."""
enum ItemOrderField {
  id
  createdAt
  updatedAt
  title
  state
}

type Label {
  id: ID!

  """Identifies the label color."""
  color: String!

  """Identifies the label name."""
  name: String!

  """A brief description of this label."""
  description: String
}

type LabelConnection {
  """A list of edges."""
  edges: [LabelEdge!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type LabelEdge {
  """The item at the end of the edge."""
  node: Label!
}

type Milestone {
  id: ID!

  """Identifies the date and time when the object was created."""
  closedAt: String

  """Identifies the date and time when the object was created."""
  createdAt: String!

  """Description of the Milestone"""
  description: String!

  """When is the milestone due"""
  dueOn: String

  """When is the milestone due"""
  issues: IssueConnection

  """ Identifies the issue number."""
  number: String!

  """Identifies the state of the PR."""
  state: String!

  """Identifies the object title."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!

  """The HTTP URL for this PR."""
  url: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type ProjectCard {
  id: ID!
}

type ProjectCardConnection {
  """A list of edges."""
  edges: [ProjectCardEdge!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type ProjectCardEdge {
  """The item at the end of the edge."""
  node: ProjectCard!
}

type PullRequest {
  id: ID!

  """A list of Users assigned to this object."""
  assignees: UserConnection

  """The actor who authored the comment."""
  author: Actor!

  """Identifies the body of the PR."""
  body: String!

  """Identifies the date and time when the object was created."""
  closedAt: String

  """A list of comments"""
  comments: CommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: String!

  """Identifies the primary key from the database."""
  databaseId: Float!

  """A list of labels associated with the object."""
  labels: LabelConnection

  """A list of labels associated with the object."""
  milestone: Milestone

  """ Identifies the issue number."""
  number: String!

  """A list of Users that are participating in the conversation."""
  participants: UserConnection!

  """List of associated project cards."""
  projectCards: ProjectCardConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!

  """The repository where the PR is located"""
  repository: Repository!

  """Identifies the object title."""
  title: String!

  """Identifies the state of the PR."""
  state: String!

  """The HTTP URL for this PR."""
  url: String!
}

type Query {
  """Fetch data useful for UI configuration"""
  config: Config!

  """Fetch data (items, aggregatiosn) related to GitHub PRs"""
  githubPullrequests: GithubPullrequests!
}

type Repository {
  id: ID!

  """Identifies the primary key from the database."""
  databaseId: Float!

  """The name of the repository."""
  name: String

  """The HTTP URL for this repository."""
  url: String!

  """The User owner of the repository."""
  owner: RepositoryOwner!
}

type RepositoryOwner {
  id: ID!

  """The username of the actor."""
  login: String!

  """The HTTP URL for this repository."""
  url: String!
}

type User {
  """The username of the actor."""
  login: String!

  """A URL pointing to the actor public avatar."""
  avatarUrl: String

  """The HTTP URL for this actor."""
  url: String!

  """The user public profile name."""
  name: String!
}

type UserConnection {
  """A list of edges."""
  edges: [UserEdge!]!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type UserEdge {
  """The item at the end of the edge."""
  node: User!
}
